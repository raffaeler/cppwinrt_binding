//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"
#include "Binding1.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

namespace winrt::BindingViewModels::implementation
{
    using Application = ::winrt::Windows::UI::Xaml::Application;
    using ComponentResourceLocation = ::winrt::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation;
    using DataTemplate = ::winrt::Windows::UI::Xaml::DataTemplate;
    using DependencyObject = ::winrt::Windows::UI::Xaml::DependencyObject;
    using DependencyProperty = ::winrt::Windows::UI::Xaml::DependencyProperty;
    using IComponentConnector = ::winrt::Windows::UI::Xaml::Markup::IComponentConnector;
    using Uri = ::winrt::Windows::Foundation::Uri;
    using XamlBindingHelper = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper;

    template <typename D, typename ... I>
    void Binding1T<D, I...>::InitializeComponent()
    {
        if (!_contentLoaded)
        {
            _contentLoaded = true;
            Uri resourceLocator{ L"ms-appx:///Binding1.xaml" };
            Application::LoadComponent(*this, resourceLocator, ComponentResourceLocation::Application);
        }
    }

    template <typename D, typename... I>
    void Binding1T<D, I...>::Connect(int32_t, IInspectable const&)
    {
        _contentLoaded = true;
    }

    template <typename D, typename ... I>
    void Binding1T<D, I...>::DisconnectUnloadedObject(int32_t)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects to disconnect." };
    }

    template <typename D, typename ... I>
    void Binding1T<D, I...>::UnloadObject(DependencyObject const&)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects." };
    }

    template <typename D, typename... I>
    IComponentConnector Binding1T<D, I...>::GetBindingConnector(int32_t connectionId, IInspectable const& target)
    {
        ::winrt::com_ptr<::XamlBindingInfo::XamlBindings> bindings;
        switch (connectionId)
        {
            case 1: // Binding1.xaml line 1
                {
                    auto element1 = target.as<::winrt::Windows::UI::Xaml::Controls::Page>();
                    auto objBindings = std::make_unique<Binding1_obj1_Bindings>();
                    objBindings->SetDataRoot(*this);
                    bindings = winrt::make_self<::XamlBindingInfo::XamlBindings>(std::move(objBindings));
                    Bindings = bindings;
                    element1.Loading({&*bindings, &::XamlBindingInfo::XamlBindings::Loading});
                }
                break;
        }
        return bindings ? bindings.as<::winrt::Windows::UI::Xaml::Markup::IComponentConnector>() : nullptr;
    }

    template <typename D, typename ... I>
    class Binding1T<D, I...>::Binding1_obj1_Bindings
        : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::winrt::BindingViewModels::Binding1, ::XamlBindingInfo::XamlBindingTrackingBase>
        , public ::XamlBindingInfo::IXamlBindingTracking
{
    public:
        Binding1_obj1_Bindings()
        {
            InitializeTracking(this);
        }

        ~Binding1_obj1_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 2: // Binding1.xaml line 23
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj2 = targetElement;
                }
                break;
            case 3: // Binding1.xaml line 27
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj3 = targetElement;
                    targetElement.Click([this](::winrt::Windows::Foundation::IInspectable const& sender, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& e)
                    {
                        GetDataRoot().ViewModel().StartTimer();
                    });
                }
                break;
            case 4: // Binding1.xaml line 28
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj4 = targetElement;
                    targetElement.Click([this](::winrt::Windows::Foundation::IInspectable const& sender, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& e)
                    {
                        GetDataRoot().ViewModel().ResetTimer();
                    });
                }
                break;
            case 5: // Binding1.xaml line 18
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj5 = targetElement;
                    targetElement.Click([this](::winrt::Windows::Foundation::IInspectable const& sender, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& e)
                    {
                        GetDataRoot().ViewModel().GoHome();
                    });
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj2 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::Button obj3 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::Button obj4 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::Button obj5 { nullptr };

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged cachePC_ViewModel{nullptr};
        ::winrt::event_token tokenPC_ {};
        ::winrt::event_token tokenPC_ViewModel {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::BindingViewModels::Binding1 obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ViewModel(obj.ViewModel(), phase);
                }
            }
        }

        void Update_ViewModel(::winrt::BindingViewModels::MainViewModel obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_ViewModel, tokenPC_ViewModel);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ViewModel_Count(obj.Count(), phase);
                }
            }
        }

        void Update_ViewModel_Count(int32_t obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding1.xaml line 23
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj2, ::winrt::to_hstring(obj));
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_ViewModel, tokenPC_ViewModel);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::BindingViewModels::Binding1>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ViewModel(obj.ViewModel(), DATA_CHANGED);
                    }
                }
                else if (propName == L"ViewModel")
                {
                    if (obj)
                    {
                        Update_ViewModel(obj.ViewModel(), DATA_CHANGED);
                    }
                }
            }
            if (cachePC_ViewModel && cachePC_ViewModel == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::BindingViewModels::MainViewModel>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ViewModel_Count(obj.Count(), DATA_CHANGED);
                    }
                }
                else if (propName == L"Count")
                {
                    if (obj)
                    {
                        Update_ViewModel_Count(obj.Count(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }

        static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::winrt::Windows::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }
    }; 

    template Binding1T<Binding1>;
}


#pragma warning(pop)


