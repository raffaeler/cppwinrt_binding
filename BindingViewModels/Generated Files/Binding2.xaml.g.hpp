//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"
#include "Binding2.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

namespace winrt::BindingViewModels::implementation
{
    using Application = ::winrt::Windows::UI::Xaml::Application;
    using ComponentResourceLocation = ::winrt::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation;
    using DataTemplate = ::winrt::Windows::UI::Xaml::DataTemplate;
    using DependencyObject = ::winrt::Windows::UI::Xaml::DependencyObject;
    using DependencyProperty = ::winrt::Windows::UI::Xaml::DependencyProperty;
    using IComponentConnector = ::winrt::Windows::UI::Xaml::Markup::IComponentConnector;
    using Uri = ::winrt::Windows::Foundation::Uri;
    using XamlBindingHelper = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper;

    template <typename D, typename ... I>
    void Binding2T<D, I...>::InitializeComponent()
    {
        if (!_contentLoaded)
        {
            _contentLoaded = true;
            Uri resourceLocator{ L"ms-appx:///Binding2.xaml" };
            Application::LoadComponent(*this, resourceLocator, ComponentResourceLocation::Application);
        }
    }

    template <typename D, typename... I>
    void Binding2T<D, I...>::Connect(int32_t, IInspectable const&)
    {
        _contentLoaded = true;
    }

    template <typename D, typename ... I>
    void Binding2T<D, I...>::DisconnectUnloadedObject(int32_t)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects to disconnect." };
    }

    template <typename D, typename ... I>
    void Binding2T<D, I...>::UnloadObject(DependencyObject const&)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects." };
    }

    template <typename D, typename... I>
    IComponentConnector Binding2T<D, I...>::GetBindingConnector(int32_t connectionId, IInspectable const& target)
    {
        ::winrt::com_ptr<::XamlBindingInfo::XamlBindings> bindings;
        switch (connectionId)
        {
            case 1: // Binding2.xaml line 1
                {
                    auto element1 = target.as<::winrt::Windows::UI::Xaml::Controls::Page>();
                    auto objBindings = std::make_unique<Binding2_obj1_Bindings>();
                    objBindings->SetDataRoot(*this);
                    bindings = winrt::make_self<::XamlBindingInfo::XamlBindings>(std::move(objBindings));
                    Bindings = bindings;
                    element1.Loading({&*bindings, &::XamlBindingInfo::XamlBindings::Loading});
                }
                break;
            case 2: // Binding2.xaml line 12
                {
                    auto element2 = target.as<::winrt::Windows::UI::Xaml::Controls::StackPanel>();
                    auto objBindings = std::make_unique<Binding2_obj2_Bindings>();
                    objBindings->SetDataRoot(element2.DataContext());
                    bindings = winrt::make_self<::XamlBindingInfo::XamlBindings>(std::move(objBindings));
                    bindings->SubscribeForDataContextChanged(element2);
                    DataTemplate::SetExtensionInstance(element2, bindings.as<::winrt::Windows::UI::Xaml::IDataTemplateExtension>());
                    XamlBindingHelper::SetDataTemplateComponent(element2, bindings.as<::winrt::Windows::UI::Xaml::Markup::IDataTemplateComponent>());
                }
                break;
        }
        return bindings ? bindings.as<::winrt::Windows::UI::Xaml::Markup::IComponentConnector>() : nullptr;
    }

    template <typename D, typename ... I>
    class Binding2T<D, I...>::Binding2_obj2_Bindings
        : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::winrt::BindingViewModels::Person, ::XamlBindingInfo::XamlBindingTrackingBase>
        , public ::XamlBindingInfo::IXamlBindingTracking
{
    public:
        Binding2_obj2_Bindings()
        {
            InitializeTracking(this);
        }

        ~Binding2_obj2_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 2: // Binding2.xaml line 12
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::StackPanel>();
                    obj2 = targetElement;
                }
                break;
            case 3: // Binding2.xaml line 13
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj3 = targetElement;
                    obj3.RegisterPropertyChangedCallback(::winrt::Windows::UI::Xaml::Controls::TextBlock::TextProperty(),
                        [this] (DependencyObject const& sender, DependencyProperty const& prop)
                        {
                            if (IsInitialized())
                            {
                                // Update Two Way binding
                                GetDataRoot().FirstName(obj3.Text());
                            }
                        });
                }
                break;
            case 4: // Binding2.xaml line 14
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj4 = targetElement;
                    obj4.RegisterPropertyChangedCallback(::winrt::Windows::UI::Xaml::Controls::TextBlock::TextProperty(),
                        [this] (DependencyObject const& sender, DependencyProperty const& prop)
                        {
                            if (IsInitialized())
                            {
                                // Update Two Way binding
                                GetDataRoot().LastName(obj4.Text());
                            }
                        });
                }
                break;
            case 5: // Binding2.xaml line 16
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj5 = targetElement;
                    obj5.RegisterPropertyChangedCallback(::winrt::Windows::UI::Xaml::Controls::TextBlock::TextProperty(),
                        [this] (DependencyObject const& sender, DependencyProperty const& prop)
                        {
                            if (IsInitialized())
                            {
                                // Update Two Way binding
                                GetDataRoot().Age(::winrt::unbox_value<int32_t>(::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<int32_t>(), ::winrt::box_value(::winrt::hstring(obj5.Text())))));
                            }
                        });
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }

        void Recycle() override
        {
            ReleaseAllListeners();
        }

        void ProcessBindings(IInspectable const& item, int itemIndex, int phase, int32_t& nextPhase)
        {
            nextPhase = -1;
            switch (phase)
            {
            case 0:
                {
                    nextPhase = -1;
                    SetDataRoot(item);
                    if (_dataContextChangedToken.value != 0)
                    {
                        this->obj2.get().DataContextChanged(_dataContextChangedToken);
                        _dataContextChangedToken.value = 0;
                    }
                    _isInitialized = true;
                 }
                 break;
            }
            Update_(::winrt::unbox_value<::winrt::BindingViewModels::Person>(item) , 1 << phase);
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Controls::StackPanel> obj2;
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj3 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj4 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj5 { nullptr };

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::event_token tokenPC_ {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::BindingViewModels::Person obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_FirstName(obj.FirstName(), phase);
                    Update_LastName(obj.LastName(), phase);
                    Update_Age(obj.Age(), phase);
                }
            }
        }

        void Update_FirstName(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding2.xaml line 13
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj3, obj);
            }
        }

        void Update_LastName(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding2.xaml line 14
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj4, obj);
            }
        }

        void Update_Age(int32_t obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding2.xaml line 16
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj5, ::winrt::to_hstring(obj));
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::BindingViewModels::Person>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_FirstName(obj.FirstName(), DATA_CHANGED);
                        Update_LastName(obj.LastName(), DATA_CHANGED);
                        Update_Age(obj.Age(), DATA_CHANGED);
                    }
                }
                else if (propName == L"FirstName")
                {
                    if (obj)
                    {
                        Update_FirstName(obj.FirstName(), DATA_CHANGED);
                    }
                }
                else if (propName == L"LastName")
                {
                    if (obj)
                    {
                        Update_LastName(obj.LastName(), DATA_CHANGED);
                    }
                }
                else if (propName == L"Age")
                {
                    if (obj)
                    {
                        Update_Age(obj.Age(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }

        static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::winrt::Windows::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }
    }; 

    template <typename D, typename ... I>
    class Binding2T<D, I...>::Binding2_obj1_Bindings
        : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::winrt::BindingViewModels::Binding2, ::XamlBindingInfo::XamlBindingTrackingBase>
        , public ::XamlBindingInfo::IXamlBindingTracking
{
    public:
        Binding2_obj1_Bindings()
        {
            InitializeTracking(this);
        }

        ~Binding2_obj1_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 6: // Binding2.xaml line 83
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::ListView>();
                    obj6 = targetElement;
                    obj6.RegisterPropertyChangedCallback(::winrt::Windows::UI::Xaml::Controls::Primitives::Selector::SelectedItemProperty(),
                        [this] (DependencyObject const& sender, DependencyProperty const& prop)
                        {
                            if (IsInitialized())
                            {
                                // Update Two Way binding
                                GetDataRoot().ViewModel().SelectedPerson(obj6.SelectedItem());
                            }
                        });
                }
                break;
            case 7: // Binding2.xaml line 70
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBox>();
                    obj7 = targetElement;
                    obj7.RegisterPropertyChangedCallback(::winrt::Windows::UI::Xaml::Controls::TextBox::TextProperty(),
                        [this] (DependencyObject const& sender, DependencyProperty const& prop)
                        {
                            if (IsInitialized())
                            {
                                // Update Two Way binding
                                GetDataRoot().ViewModel().CurrentPerson().FirstName(obj7.Text());
                            }
                        });
                }
                break;
            case 8: // Binding2.xaml line 71
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBox>();
                    obj8 = targetElement;
                    obj8.RegisterPropertyChangedCallback(::winrt::Windows::UI::Xaml::Controls::TextBox::TextProperty(),
                        [this] (DependencyObject const& sender, DependencyProperty const& prop)
                        {
                            if (IsInitialized())
                            {
                                // Update Two Way binding
                                GetDataRoot().ViewModel().CurrentPerson().LastName(obj8.Text());
                            }
                        });
                }
                break;
            case 9: // Binding2.xaml line 72
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBox>();
                    obj9 = targetElement;
                    obj9.RegisterPropertyChangedCallback(::winrt::Windows::UI::Xaml::Controls::TextBox::TextProperty(),
                        [this] (DependencyObject const& sender, DependencyProperty const& prop)
                        {
                            if (IsInitialized())
                            {
                                // Update Two Way binding
                                ::winrt::hstring age = obj9.Text();
                                GetDataRoot().ViewModel().CurrentPerson().SetAge(age);
                            }
                        });
                }
                break;
            case 10: // Binding2.xaml line 76
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj10 = targetElement;
                    targetElement.Click([this](::winrt::Windows::Foundation::IInspectable const& sender, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& e)
                    {
                        GetDataRoot().ViewModel().NewPerson();
                    });
                }
                break;
            case 11: // Binding2.xaml line 77
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj11 = targetElement;
                    targetElement.Click([this](::winrt::Windows::Foundation::IInspectable const& sender, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& e)
                    {
                        GetDataRoot().ViewModel().RemovePerson();
                    });
                }
                break;
            case 12: // Binding2.xaml line 41
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::TextBlock>();
                    obj12 = targetElement;
                }
                break;
            case 13: // Binding2.xaml line 44
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj13 = targetElement;
                    targetElement.Click([this](::winrt::Windows::Foundation::IInspectable const& sender, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& e)
                    {
                        GetDataRoot().ViewModel().StartTimer();
                    });
                }
                break;
            case 14: // Binding2.xaml line 45
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj14 = targetElement;
                    targetElement.Click([this](::winrt::Windows::Foundation::IInspectable const& sender, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& e)
                    {
                        GetDataRoot().ViewModel().ResetTimer();
                    });
                }
                break;
            case 15: // Binding2.xaml line 32
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj15 = targetElement;
                    targetElement.Click([this](::winrt::Windows::Foundation::IInspectable const& sender, ::winrt::Windows::UI::Xaml::RoutedEventArgs const& e)
                    {
                        GetDataRoot().ViewModel().GoHome();
                    });
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::Windows::UI::Xaml::Controls::ListView obj6 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBox obj7 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBox obj8 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBox obj9 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::Button obj10 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::Button obj11 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::TextBlock obj12 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::Button obj13 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::Button obj14 { nullptr };
        ::winrt::Windows::UI::Xaml::Controls::Button obj15 { nullptr };

        // Fields for binding tracking.
        ::winrt::weak_ref<::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged> cachePC_;
        ::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged cachePC_ViewModel{nullptr};
        ::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged cachePC_ViewModel_CurrentPerson{nullptr};
        ::winrt::event_token tokenPC_ {};
        ::winrt::event_token tokenPC_ViewModel {};
        ::winrt::event_token tokenPC_ViewModel_CurrentPerson {};
        std::map<::std::wstring, std::function<void (int)>> PendingFunctionBindings;


        void Invoke_ViewModel_CurrentPerson_M_GetAge_757602046(int phase)
        {
            ::winrt::hstring result = GetDataRoot().ViewModel().CurrentPerson().GetAge();
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding2.xaml line 72
                Set_Windows_UI_Xaml_Controls_TextBox_Text(obj9, result);
            }
        }

        void CompleteUpdate(int phase)
        {
            for(auto& pair : PendingFunctionBindings)
            {
                pair.second(phase);
            }
            PendingFunctionBindings.clear();
        }

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::BindingViewModels::Binding2 obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_, tokenPC_);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ViewModel(obj.ViewModel(), phase);
                }
            }
            CompleteUpdate(phase);
        }

        void Update_ViewModel(::winrt::BindingViewModels::MainViewModel obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_ViewModel, tokenPC_ViewModel);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ViewModel_SelectedPerson(obj.SelectedPerson(), phase);
                    Update_ViewModel_Persons(obj.Persons(), phase);
                    Update_ViewModel_CurrentPerson(obj.CurrentPerson(), phase);
                    Update_ViewModel_Count(obj.Count(), phase);
                }
            }
        }

        void Update_ViewModel_SelectedPerson(::winrt::Windows::Foundation::IInspectable obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding2.xaml line 83
                Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(obj6, obj, std::nullopt);
            }
        }

        void Update_ViewModel_Persons(::winrt::Windows::Foundation::Collections::IVector<::winrt::Windows::Foundation::IInspectable> obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding2.xaml line 83
                Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(obj6, obj, std::nullopt);
            }
        }

        void Update_ViewModel_CurrentPerson(::winrt::BindingViewModels::Person obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_ViewModel_CurrentPerson, tokenPC_ViewModel_CurrentPerson);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_ViewModel_CurrentPerson_FirstName(obj.FirstName(), phase);
                    Update_ViewModel_CurrentPerson_LastName(obj.LastName(), phase);
                    Update_ViewModel_CurrentPerson_M_GetAge_757602046(phase);
                }
            }
        }

        void Update_ViewModel_CurrentPerson_FirstName(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding2.xaml line 70
                Set_Windows_UI_Xaml_Controls_TextBox_Text(obj7, obj);
            }
        }

        void Update_ViewModel_CurrentPerson_LastName(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding2.xaml line 71
                Set_Windows_UI_Xaml_Controls_TextBox_Text(obj8, obj);
            }
        }

        void Update_ViewModel_CurrentPerson_M_GetAge_757602046(int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                PendingFunctionBindings[L"ViewModel_CurrentPerson_M_GetAge_757602046"] = std::bind(&Binding2_obj1_Bindings::Invoke_ViewModel_CurrentPerson_M_GetAge_757602046, this, std::placeholders::_1);
            }
        }

        void Update_ViewModel_Count(int32_t obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // Binding2.xaml line 41
                Set_Windows_UI_Xaml_Controls_TextBlock_Text(obj12, ::winrt::to_hstring(obj));
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_, tokenPC_);
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_ViewModel, tokenPC_ViewModel);
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_ViewModel_CurrentPerson, tokenPC_ViewModel_CurrentPerson);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (GetDataRoot() && GetDataRoot() == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::BindingViewModels::Binding2>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ViewModel(obj.ViewModel(), DATA_CHANGED);
                    }
                }
                else if (propName == L"ViewModel")
                {
                    if (obj)
                    {
                        Update_ViewModel(obj.ViewModel(), DATA_CHANGED);
                    }
                }
            }
            if (cachePC_ViewModel && cachePC_ViewModel == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::BindingViewModels::MainViewModel>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ViewModel_SelectedPerson(obj.SelectedPerson(), DATA_CHANGED);
                        Update_ViewModel_Persons(obj.Persons(), DATA_CHANGED);
                        Update_ViewModel_CurrentPerson(obj.CurrentPerson(), DATA_CHANGED);
                        Update_ViewModel_Count(obj.Count(), DATA_CHANGED);
                    }
                }
                else if (propName == L"SelectedPerson")
                {
                    if (obj)
                    {
                        Update_ViewModel_SelectedPerson(obj.SelectedPerson(), DATA_CHANGED);
                    }
                }
                else if (propName == L"Persons")
                {
                    if (obj)
                    {
                        Update_ViewModel_Persons(obj.Persons(), DATA_CHANGED);
                    }
                }
                else if (propName == L"CurrentPerson")
                {
                    if (obj)
                    {
                        Update_ViewModel_CurrentPerson(obj.CurrentPerson(), DATA_CHANGED);
                    }
                }
                else if (propName == L"Count")
                {
                    if (obj)
                    {
                        Update_ViewModel_Count(obj.Count(), DATA_CHANGED);
                    }
                }
            }
            if (cachePC_ViewModel_CurrentPerson && cachePC_ViewModel_CurrentPerson == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::BindingViewModels::Person>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_ViewModel_CurrentPerson_FirstName(obj.FirstName(), DATA_CHANGED);
                        Update_ViewModel_CurrentPerson_LastName(obj.LastName(), DATA_CHANGED);
                        Update_ViewModel_CurrentPerson_M_GetAge_757602046(DATA_CHANGED);
                    }
                }
                else if (propName == L"FirstName")
                {
                    if (obj)
                    {
                        Update_ViewModel_CurrentPerson_FirstName(obj.FirstName(), DATA_CHANGED);
                    }
                }
                else if (propName == L"LastName")
                {
                    if (obj)
                    {
                        Update_ViewModel_CurrentPerson_LastName(obj.LastName(), DATA_CHANGED);
                    }
                }
            }
            CompleteUpdate(DATA_CHANGED);
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
            CompleteUpdate(DATA_CHANGED);
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
            CompleteUpdate(DATA_CHANGED);
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
            CompleteUpdate(DATA_CHANGED);
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
                CompleteUpdate(DATA_CHANGED);
            }
        }

        static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(::winrt::Windows::UI::Xaml::Controls::Primitives::Selector const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.SelectedItem(value);
        }

        static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(::winrt::Windows::UI::Xaml::Controls::ItemsControl const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.ItemsSource(value);
        }

        static void Set_Windows_UI_Xaml_Controls_TextBox_Text(::winrt::Windows::UI::Xaml::Controls::TextBox const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }

        static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::winrt::Windows::UI::Xaml::Controls::TextBlock const& obj, ::winrt::hstring const& value)
        {
            obj.Text(value);
        }
    }; 

    template Binding2T<Binding2>;
}


#pragma warning(pop)


