// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once

WINRT_EXPORT namespace winrt::Windows::UI::Xaml::Data {

struct PropertyChangedEventHandler;

}

WINRT_EXPORT namespace winrt::ViewModelLib {

struct INotificationBase;
struct NotificationBase;

}

namespace winrt::impl {

template <> struct category<ViewModelLib::INotificationBase>{ using type = interface_category; };
template <> struct category<ViewModelLib::NotificationBase>{ using type = class_category; };
template <> struct name<ViewModelLib::INotificationBase>{ static constexpr auto & value{ L"ViewModelLib.INotificationBase" }; };
template <> struct name<ViewModelLib::NotificationBase>{ static constexpr auto & value{ L"ViewModelLib.NotificationBase" }; };
template <> struct guid<ViewModelLib::INotificationBase>{ static constexpr GUID value{ 0xE48727D9,0x732B,0x5476,{ 0xAB,0x7A,0xC3,0x32,0x42,0xAB,0x36,0x54 } }; };
template <> struct default_interface<ViewModelLib::NotificationBase>{ using type = ViewModelLib::INotificationBase; };

template <typename D>
struct consume_ViewModelLib_INotificationBase
{
};
template <> struct consume<ViewModelLib::INotificationBase> { template <typename D> using type = consume_ViewModelLib_INotificationBase<D>; };

template <> struct abi<ViewModelLib::INotificationBase>{ struct type : IInspectable
{
};};

}
