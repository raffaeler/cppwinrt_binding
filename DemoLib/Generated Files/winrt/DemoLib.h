// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once
#include "winrt/base.h"

WINRT_WARNING_PUSH

static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180227.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/DemoLib.2.h"

namespace winrt::impl {

template <typename D> hstring consume_DemoLib_IPerson<D>::Name() const
{
    hstring result{};
    check_hresult(WINRT_SHIM(DemoLib::IPerson)->get_Name(put_abi(result)));
    return result;
}

template <typename D> int32_t consume_DemoLib_IPerson<D>::Age() const
{
    int32_t result{};
    check_hresult(WINRT_SHIM(DemoLib::IPerson)->get_Age(&result));
    return result;
}

template <typename D> void consume_DemoLib_IPerson<D>::Age(int32_t value) const
{
    check_hresult(WINRT_SHIM(DemoLib::IPerson)->put_Age(value));
}

template <typename D> hstring consume_DemoLib_IPerson<D>::ToString() const
{
    hstring result{};
    check_hresult(WINRT_SHIM(DemoLib::IPerson)->ToString(put_abi(result)));
    return result;
}

template <typename D> DemoLib::Person consume_DemoLib_IPersonFactory<D>::CreateInstance(param::hstring const& name) const
{
    DemoLib::Person value{ nullptr };
    check_hresult(WINRT_SHIM(DemoLib::IPersonFactory)->CreateInstance(get_abi(name), put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, DemoLib::IPerson> : produce_base<D, DemoLib::IPerson>
{
    HRESULT __stdcall get_Name(HSTRING* result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().Name());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_Age(int32_t* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<int32_t>(this->shim().Age());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall put_Age(int32_t value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Age(value);
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall ToString(HSTRING* result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().ToString());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, DemoLib::IPersonFactory> : produce_base<D, DemoLib::IPersonFactory>
{
    HRESULT __stdcall CreateInstance(HSTRING name, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            *value = detach_from<DemoLib::Person>(this->shim().CreateInstance(*reinterpret_cast<hstring const*>(&name)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

}

WINRT_EXPORT namespace winrt::DemoLib {

inline Person::Person() :
    Person(get_activation_factory<Person>().ActivateInstance<Person>())
{}

inline Person::Person(param::hstring const& name) :
    Person(get_activation_factory<Person, DemoLib::IPersonFactory>().CreateInstance(name))
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::DemoLib::IPerson> : winrt::impl::hash_base<winrt::DemoLib::IPerson> {};
template<> struct hash<winrt::DemoLib::IPersonFactory> : winrt::impl::hash_base<winrt::DemoLib::IPersonFactory> {};
template<> struct hash<winrt::DemoLib::Person> : winrt::impl::hash_base<winrt::DemoLib::Person> {};

}

WINRT_WARNING_POP
