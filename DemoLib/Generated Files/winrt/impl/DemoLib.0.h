// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once

WINRT_EXPORT namespace winrt::DemoLib {

struct IPerson;
struct IPersonFactory;
struct Person;

}

namespace winrt::impl {

template <> struct category<DemoLib::IPerson>{ using type = interface_category; };
template <> struct category<DemoLib::IPersonFactory>{ using type = interface_category; };
template <> struct category<DemoLib::Person>{ using type = class_category; };
template <> struct name<DemoLib::IPerson>{ static constexpr auto & value{ L"DemoLib.IPerson" }; };
template <> struct name<DemoLib::IPersonFactory>{ static constexpr auto & value{ L"DemoLib.IPersonFactory" }; };
template <> struct name<DemoLib::Person>{ static constexpr auto & value{ L"DemoLib.Person" }; };
template <> struct guid<DemoLib::IPerson>{ static constexpr GUID value{ 0x2DFB5BC8,0xD769,0x51EE,{ 0x83,0xB3,0x30,0x06,0x3D,0x55,0x65,0x55 } }; };
template <> struct guid<DemoLib::IPersonFactory>{ static constexpr GUID value{ 0xC4D62F4F,0xF9F2,0x5A4B,{ 0x8C,0xD4,0xFB,0x1C,0x22,0x6D,0x0D,0x0D } }; };
template <> struct default_interface<DemoLib::Person>{ using type = DemoLib::IPerson; };

template <typename D>
struct consume_DemoLib_IPerson
{
    hstring Name() const;
    int32_t Age() const;
    void Age(int32_t value) const;
    hstring ToString() const;
};
template <> struct consume<DemoLib::IPerson> { template <typename D> using type = consume_DemoLib_IPerson<D>; };

template <typename D>
struct consume_DemoLib_IPersonFactory
{
    DemoLib::Person CreateInstance(param::hstring const& name) const;
};
template <> struct consume<DemoLib::IPersonFactory> { template <typename D> using type = consume_DemoLib_IPersonFactory<D>; };

template <> struct abi<DemoLib::IPerson>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_Name(HSTRING* result) noexcept = 0;
    virtual HRESULT __stdcall get_Age(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_Age(int32_t value) noexcept = 0;
    virtual HRESULT __stdcall ToString(HSTRING* result) noexcept = 0;
};};

template <> struct abi<DemoLib::IPersonFactory>{ struct type : IInspectable
{
    virtual HRESULT __stdcall CreateInstance(HSTRING name, void** value) noexcept = 0;
};};

}
